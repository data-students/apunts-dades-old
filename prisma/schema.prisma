generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  username        String?        @unique
  generacio       Int            @default(2020)
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  postVotes       PostVote[]
  comments        Comment[]
  commentVotes    CommentVote[]
  createdSubjects Subject[]      @relation("CreatedBy")
  subscriptions   Subscription[]
  questions       Question[]
  questionVotes   QuestionVote[]
  Answer          Answer[]
  answerVotes     AnswerVote[]
}

model UserRequest {
  requestId String @id @default(cuid())
  userid        String
  email     String
  generacio       Int            @default(2020)
  createdAt DateTime @default(now())
  verified Boolean @default(false)
}

model AuthorizedUsers {
  email String @id
  generacio Int
  createdAt DateTime @default(now())
}

model Subject {
  id          String         @id @default(cuid())
  name        String         @unique
  acronym     String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creatorId   String
  semester    SemesterType
  creator     User           @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]
  posts       Post[]
  questions   Question[]

  @@index([name, acronym])
}

model Question {
  id        String         @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  subjectId String
  authorId  String
  subject   Subject       @relation(fields: [subjectId], references: [id])
  author    User           @relation(fields: [authorId], references: [id])
  answers   Answer[]
  votes     QuestionVote[]
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  subjectId String
  authorId  String
  tipus     TipusType
  year      Int
  subject   Subject    @relation(fields: [subjectId], references: [id])
  author    User       @relation(fields: [authorId], references: [id])
  comments  Comment[]
  votes     PostVote[]
}

model Answer {
  id         String       @id @default(cuid())
  title      String
  content    Json?
  createdAt  DateTime     @default(now())
  questionId String
  authorId   String
  answerId   String?
  accepted   Boolean      @default(false)
  question   Question     @relation(fields: [questionId], references: [id])
  author     User         @relation(fields: [authorId], references: [id])
  votes      AnswerVote[]
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  postId    String
  authorId  String
  replyToId String?
  commentId String?
  content   String
  post      Post          @relation(fields: [postId], references: [id])
  author    User          @relation(fields: [authorId], references: [id])
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
}

model Subscription {
  userId    String
  subjectId String
  user      User    @relation(fields: [userId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([userId, subjectId])
}

model PostVote {
  type   VoteType
  postId String
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  user   User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model CommentVote {
  type      VoteType
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model QuestionVote {
  type       VoteType
  questionId String
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, questionId])
}

model AnswerVote {
  type     VoteType
  answerId String
  userId   String
  answer   Answer   @relation(fields: [answerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([userId, answerId])
}

enum VoteType {
  UP
  DOWN
}

enum TipusType {
  apunts
  examens
  exercicis
  diapositives
  altres
}

enum SemesterType {
  Q1
  Q2
  Q3
  Q4
  Q5
  Q6
  Q7
  Q8
  ALTRES
}
