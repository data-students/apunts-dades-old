// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username String? @unique

  generacio Int @default(2020) // TODO: fer aix√≤ fresquito

  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  comments        Comment[]
  commentVotes    CommentVote[]
  votes           Vote[]
  createdSubjects Subject[]      @relation("CreatedBy")
  subscriptions   Subscription[]
  questions       Question[]
  Answer          Answer[]
}

model Subject {
  id        String       @id @default(cuid())
  name      String       @unique
  acronym   String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  creator   User         @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId String
  semester  SemesterType

  subscribers Subscription[]

  posts     Post[]
  questions Question[]

  @@index([name, acronym])
}

model Question {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  answers Answer[]
  votes   Vote[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes    Vote[]
  tipus    TipusType
  year     Int
}

model Answer {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  votes    Vote[]
  answerId String?

  accepted Boolean @default(false)
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Subscription {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  @@id([userId, subjectId])
}

enum VoteType {
  UP
  DOWN
}

enum TipusType {
  apunts
  examens
  exercicis
  diapositives
  altres
}

enum SemesterType {
  Q1
  Q2
  Q3
  Q4
  Q5
  Q6
  Q7
  Q8
  ALTRES
}

model Vote {
  type VoteType

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user       User      @relation(fields: [userId], references: [id])
  userId     String
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  Answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?

  @@id([userId, postId])
}

model CommentVote {
  type VoteType

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([userId, commentId])
}
